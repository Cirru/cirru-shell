// Generated by CoffeeScript 1.4.0
var all_libs, cirru_parse, concat, delay, dirname, err, fs, init, is_arr, is_func, is_obj, is_str, join, keys, load_node, log, make_list, parse, path, print, pwd, read, read_file, watch,
  __slice = [].slice;

fs = require("fs");

path = require("path");

log = console.log;

err = function(info) {
  throw new Error(info);
};

cirru_parse = require("cirru-parser").parse;

delay = function(fn) {
  return setTimeout(fn, 100);
};

keys = function(obj) {
  var key, value, _results;
  _results = [];
  for (key in obj) {
    value = obj[key];
    _results.push(log(key));
  }
  return _results;
};

is_arr = Array.isArray;

is_str = function(item) {
  return (typeof item) === "string";
};

is_obj = function(item) {
  return (typeof item) === "object";
};

is_func = function(item) {
  return (typeof item) === "function";
};

make_list = function(list) {
  var ret;
  ret = [];
  list.map(function(item) {
    if (Array.isArray(item)) {
      return ret.push(make_list(item));
    } else {
      ret.n = item.n;
      return ret.push(item.c);
    }
  });
  return ret;
};

init = require("./init").init;

parse = function(name) {
  return make_list(cirru_parse(read_file(name)));
};

read_file = function(name) {
  return fs.readFileSync(name, "utf8");
};

watch = function(name, fn) {
  return fs.watchFile(name, {
    interval: 100
  }, fn);
};

join = path.join;

dirname = path.dirname;

pwd = process.env.PWD;

print = function(item) {
  log(item);
  return print;
};

concat = function(arr1, arr2) {
  return arr1.concat(arr2);
};

all_libs = {};

read = function(exp, scope) {
  var arg, body, head, ret;
  head = exp[0], body = 2 <= exp.length ? __slice.call(exp, 1) : [];
  if (is_arr(head)) {
    head = read(head, scope);
  } else if (is_str(head)) {
    if (scope[head] != null) {
      head = scope[head];
    } else {
      err("head " + head + " not found");
    }
  }
  ret = head;
  if (body[0] != null) {
    arg = body.shift();
    ret = is_func(head) ? head(arg) : is_obj(head) ? head[arg] : err("strange head:", head);
    if (body[0] != null) {
      ret = read(concat([ret], body), scope);
    }
  }
  return ret;
};

load_node = function(filename, parent) {
  var ast, load, load_require, self;
  all_libs[filename] = self = {};
  ast = parse(filename);
  self.update = function() {
    ast.forEach(function(line) {
      return read(line, self.scope);
    });
    if (parent != null) {
      return parent.update();
    }
  };
  watch(filename, function() {
    log("\nreloading......\n");
    ast = parse(filename);
    return self.update();
  });
  self.scope = {
    filename: filename,
    print: print,
    init: init
  };
  self.scope.require = load_require = function(name) {
    var child;
    child = join(dirname(filename), name);
    if (all_libs[child] == null) {
      all_libs[child] = load_node(child, self);
    }
    return all_libs[child];
  };
  (load = function() {
    ast = parse(filename);
    return ast.forEach(function(line) {
      return read(line, self.scope);
    });
  })();
  return self.scope;
};

exports.run = function() {
  var filename;
  filename = process.argv[2];
  return load_node(join(pwd, filename));
};
