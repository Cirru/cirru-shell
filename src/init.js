// Generated by CoffeeScript 1.4.0
var add, comment, do_func, err, exit, fn, gen, get, get_env, if_func, is_arr, is_fun, is_num, is_obj, is_str, log, minus, number, print, raw, set, set_env, smaller, spawn, string;

is_arr = Array.isArray;

is_str = function(item) {
  return typeof item === 'string';
};

is_num = function(item) {
  return typeof item === 'number';
};

is_fun = function(item) {
  return typeof item === 'function';
};

is_obj = function(item) {
  return typeof item === 'object';
};

gen = function(item) {
  return JSON.stringify(item, null, 2);
};

err = function(info) {
  throw new Error(info);
};

log = function() {
  return console.log.apply(console, arguments);
};

spawn = function(scope) {
  var child;
  child = {};
  child.__proto__ = scope;
  return child;
};

print = function(item, scope) {
  if (is_str(item)) {
    log(scope[item]);
  } else if (is_arr) {
    log(scope.read(item, scope));
  } else {
    log(item);
  }
  return print;
};

number = function(item) {
  return Number(item);
};

string = function(item, scope) {
  var ret;
  ret = is_arr(item) ? scope.read(item, scope) : is_str(item) ? scope[item] : String(item);
  if (is_fun(ret)) {
    return ret.toString(2);
  } else if (is_obj(ret)) {
    return JSON.stringify(ret, null, 2);
  } else {
    return String(ret);
  }
};

raw = function(item) {
  return item;
};

set = function(key, scope) {
  return function(value) {
    var ret;
    scope[key] = {};
    if (is_str(value)) {
      scope[key] = scope[value];
    } else if (is_arr(value)) {
      ret = scope.read(value, scope);
      scope[key] = ret;
    }
    return scope[key];
  };
};

get = function(item, scope) {
  if (is_str(item)) {
    return scope[item];
  } else if (is_arr(item)) {
    return scope.read(item, scope);
  } else if (if_func(item)) {
    return item;
  } else {
    return err("can't get item: " + item);
  }
};

add = function(item1, scope) {
  return function(item2) {
    var a, b;
    a = get(item1, scope);
    b = get(item2, scope);
    return a + b;
  };
};

minus = function(item1, scope) {
  return function(item2) {
    var a, b;
    a = get(item1, scope);
    b = get(item2, scope);
    return a - b;
  };
};

comment = function() {
  return comment;
};

get_env = function(item, scope) {
  return scope;
};

set_env = function(item, scope) {
  var key, value, _ref, _results;
  _ref = scope[item];
  _results = [];
  for (key in _ref) {
    value = _ref[key];
    _results.push(scope[key] = value);
  }
  return _results;
};

fn = function(item1, scope) {
  return function(item2) {
    var child, ret;
    if (item1[0] != null) {
      return (ret = function(scope, item1) {
        return function(arg, out_scope) {
          var child, key, value;
          child = spawn(out_scope);
          value = get(arg, out_scope);
          key = item1[0];
          child[key] = value;
          if (item1[1] != null) {
            return ret(child, item1.slice(1));
          } else {
            return get(item2, child);
          }
        };
      })(scope, item1);
    } else {
      child = spawn(scope);
      return get(item2, child);
    }
  };
};

do_func = function(item, scope) {
  scope.read(item, scope);
  return do_func;
};

if_func = function(item1, scope) {
  return function(item2) {
    return function(item3) {
      if (get(item1, scope)) {
        return get(item2, scope);
      } else {
        return get(item3, scope);
      }
    };
  };
};

smaller = function(item1, scope) {
  return function(item2) {
    var a, b;
    a = get(item1, scope);
    b = get(item2, scope);
    return a < b;
  };
};

exit = function() {
  return process.exit();
};

exports.init = {
  is_arr: is_arr,
  is_str: is_str,
  is_str: is_str,
  is_obj: is_obj,
  is_fun: is_fun,
  is_num: is_num,
  print: print,
  number: number,
  string: string,
  "+": add,
  "-": minus,
  set: set,
  get: get,
  comment: comment,
  "set-env": set_env,
  "get-env": get_env,
  fn: fn,
  "do": do_func,
  "<": smaller,
  "if": if_func,
  raw: raw,
  exit: exit
};
